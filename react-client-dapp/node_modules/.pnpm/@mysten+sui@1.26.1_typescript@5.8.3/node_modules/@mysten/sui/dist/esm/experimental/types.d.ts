import type { Experimental_SuiClient } from './client.js';
export type SuiClientRegistration<T extends Experimental_SuiClient = Experimental_SuiClient, Name extends string = string, Extension = unknown> = {
    readonly name: Name;
    readonly register: (client: T) => Extension;
} | SelfRegisteringClientExtension<T, Name, Extension>;
export interface SelfRegisteringClientExtension<T extends Experimental_SuiClient = Experimental_SuiClient, Name extends string = string, Extension = unknown> {
    experimental_asClientExtension: () => {
        readonly name: Name;
        readonly register: (client: T) => Extension;
    };
}
export type Simplify<T> = {
    [K in keyof T]: T[K];
} & {};
export type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
export type ClientWithExtensions<T> = Experimental_SuiClient & T;
export declare namespace Experimental_SuiClientTypes {
    type Network = 'mainnet' | 'testnet' | 'devnet' | 'localnet' | (string & {});
    interface SuiClientOptions {
        network: Network;
    }
    /** Object methods */
    interface TransportMethods {
        getObjects?: (options: GetObjectsOptions) => Promise<GetObjectsResponse>;
        getOwnedObjects?: (options: GetOwnedObjectsOptions) => Promise<GetOwnedObjectsResponse>;
        getCoins?: (options: GetCoinsOptions) => Promise<GetCoinsResponse>;
    }
    interface GetObjectsOptions {
        objectIds: string[];
    }
    interface GetOwnedObjectsOptions {
        address: string;
        limit?: number;
        cursor?: string | null;
        type?: string;
    }
    interface GetCoinsOptions {
        address: string;
        coinType: string;
    }
    interface GetObjectsResponse {
        objects: (ObjectResponse | Error)[];
    }
    interface GetOwnedObjectsResponse {
        objects: ObjectResponse[];
        hasNextPage: boolean;
        cursor: string | null;
    }
    interface GetCoinsResponse {
        objects: CoinResponse[];
        hasNextPage: boolean;
        cursor: string | null;
    }
    interface ObjectResponse {
        id: string;
        version: string;
        digest: string;
        owner: ObjectOwner;
        type: string;
        content: Uint8Array;
    }
    interface CoinResponse extends ObjectResponse {
        balance: bigint;
    }
    /** Balance methods */
    interface TransportMethods {
        getBalance?: (options: GetBalanceOptions) => Promise<GetBalanceResponse>;
        getAllBalances?: (options: GetAllBalancesOptions) => Promise<GetAllBalancesResponse>;
    }
    interface GetBalanceOptions {
        address: string;
        coinType: string;
    }
    interface CoinBalance {
        coinType: string;
        balance: bigint;
    }
    interface GetBalanceResponse {
        balance: CoinBalance;
    }
    interface GetAllBalancesOptions {
        address: string;
        limit?: number;
        cursor?: string | null;
    }
    interface GetAllBalancesResponse {
        balances: CoinBalance[];
        hasNextPage: boolean;
        cursor: string | null;
    }
    /** Transaction methods */
    interface TransportMethods {
        getTransaction?: (options: GetTransactionOptions) => Promise<GetTransactionResponse>;
        executeTransaction?: (options: ExecuteTransactionOptions) => Promise<ExecuteTransactionResponse>;
        dryRunTransaction?: (options: DryRunTransactionOptions) => Promise<DryRunTransactionResponse>;
    }
    interface TransactionResponse {
        digest: string;
        signatures: string[];
        bcs: Uint8Array;
        effects: Uint8Array;
        events?: Uint8Array;
    }
    interface GetTransactionOptions {
        digest: string;
    }
    interface GetTransactionResponse {
        transaction: TransactionResponse;
    }
    interface ExecuteTransactionOptions {
        transaction: Uint8Array;
        signatures: string[];
    }
    interface DryRunTransactionOptions {
        transaction: Uint8Array;
    }
    interface DryRunTransactionResponse {
        transaction: TransactionResponse;
    }
    interface ExecuteTransactionResponse {
        transaction: TransactionResponse;
    }
    interface TransportMethods {
        getReferenceGasPrice?: () => Promise<GetReferenceGasPriceResponse>;
    }
    interface GetReferenceGasPriceResponse {
        referenceGasPrice: bigint;
    }
    /** ObjectOwner types */
    interface AddressOwner {
        $kind: 'AddressOwner';
        AddressOwner: string;
    }
    interface ParentOwner {
        $kind: 'ObjectOwner';
        ObjectOwner: string;
    }
    interface SharedOwner {
        $kind: 'Shared';
        Shared: {
            initialSharedVersion: string;
        };
    }
    interface ImmutableOwner {
        $kind: 'Immutable';
        Immutable: true;
    }
    interface ConsensusV2Owner {
        $kind: 'ConsensusV2';
        ConsensusV2Owner: {
            authenticator: ConsensusV2Authenticator;
            startVersion: string;
        };
    }
    interface SingleOwnerAuthenticator {
        $kind: 'SingleOwner';
        SingleOwner: string;
    }
    type ConsensusV2Authenticator = SingleOwnerAuthenticator;
    type ObjectOwner = AddressOwner | ParentOwner | SharedOwner | ImmutableOwner | ConsensusV2Owner;
    /** Effects */
    interface TransactionEffects {
        bcs: Uint8Array;
        digest: string;
        version: number;
        status: ExecutionStatus;
        epoch: bigint | null;
        gasUsed: GasCostSummary;
        transactionDigest: string;
        gasObject: ChangedObject;
        eventsDigest: string | null;
        dependencies: string[];
        lamportVersion: bigint | null;
        changedObjects: ChangedObject[];
        unchangedSharedObjects: UnchangedSharedObject[];
        auxiliaryDataDigest: string | null;
    }
    interface ChangedObject {
        id: string;
        inputState: 'Unknown' | 'DoesNotExist' | 'Exists';
        inputVersion: bigint | null;
        inputDigest: string | null;
        inputOwner: ObjectOwner | null;
        outputState: 'Unknown' | 'DoesNotExist' | 'ObjectWrite' | 'PackageWrite';
        outputVersion: bigint | null;
        outputDigest: string | null;
        outputOwner: ObjectOwner | null;
        idOperation: 'Unknown' | 'None' | 'Created' | 'Deleted';
        objectType: string | null;
    }
    interface GasCostSummary {
        computationCost: bigint;
        storageCost: bigint;
        storageRebate: bigint;
        nonRefundableStorageFee: bigint;
    }
    type ExecutionStatus = {
        success: true;
        error: null;
    } | {
        success: false;
        error: string;
    };
    interface UnchangedSharedObject {
        kind: 'Unknown' | 'ReadOnlyRoot' | 'MutateDeleted' | 'ReadDeleted' | 'Canceled' | 'PerEpochConfig';
        objectId: string;
        version: bigint;
        digest: string;
        objectType: string;
    }
}
